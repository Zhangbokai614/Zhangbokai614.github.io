const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":25,\"nextId\":25,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-184f4da6\",\"2\":\"v-184f4da6#hi-there-👋\",\"3\":\"v-184f4da6#✍-blog-writing\",\"4\":\"v-67d327cb\",\"5\":\"v-67d327cb#微信公众号\",\"6\":\"v-54de3571\",\"7\":\"v-54de3571@0\",\"8\":\"v-54de3571@1\",\"9\":\"v-35661afa\",\"10\":\"v-35661afa#feature\",\"11\":\"v-35661afa#overflow\",\"12\":\"v-35661afa#operation\",\"13\":\"v-35661afa@0\",\"14\":\"v-35661afa@1\",\"15\":\"v-337f4741\",\"16\":\"v-337f4741#规则\",\"17\":\"v-337f4741#状态\",\"18\":\"v-337f4741@0\",\"19\":\"v-337f4741@1\",\"20\":\"v-212ad8b6\",\"21\":\"v-2e25198a\",\"22\":\"v-e6c1cfb0\",\"23\":\"v-21ba2ec8\",\"24\":\"v-6b669443\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1],\"2\":[3,35],\"3\":[3,19],\"4\":[1],\"5\":[1,2],\"6\":[1],\"7\":[null,null,1],\"8\":[null,null,2],\"9\":[2],\"10\":[1,53],\"11\":[1,120],\"12\":[1,77],\"13\":[null,null,1],\"14\":[null,null,1],\"15\":[3,18],\"16\":[1,77],\"17\":[1,237],\"18\":[null,null,1],\"19\":[null,null,3],\"20\":[1],\"21\":[1],\"22\":[2],\"23\":[1],\"24\":[1]},\"averageFieldLength\":[1.4439072039072038,41.89529914529915,0.58],\"storedFields\":{\"0\":{\"h\":\"Home\"},\"1\":{\"h\":\"关于我\"},\"2\":{\"h\":\"Hi there 👋\",\"t\":[\"My name is Bokai Zhang. I'm a Fullstack software engineer.\",\"My current status\",\"👨‍🔬 Trying to become a programming master.\",\"📚 Have been studying hard.\",\"🤔 I am currently working as a backend developer.\",\"💻 Thinking, Coding, Writing\"]},\"3\":{\"h\":\"✍ Blog & Writing\",\"t\":[\"Apart from coding, I also maintain a blog - you can find my articles on my Blog & Yuque & Observable & WeChat.\"]},\"4\":{\"h\":\"更多内容\"},\"5\":{\"h\":\"微信公众号\",\"t\":[\"同名微信公众号 - Transistor\"]},\"6\":{\"h\":\"demo\"},\"7\":{\"c\":[\"使用指南\"]},\"8\":{\"c\":[\"页面配置\",\"使用指南\"]},\"9\":{\"h\":\"MySQL-Integer\"},\"10\":{\"h\":\"Feature\",\"t\":[\"Type\",\"Storage (Bytes)\",\"Minimum Value Signed\",\"Minimum Value Unsigned\",\"Maximum Value Signed\",\"Maximum Value Unsigned\",\"TINYINT\",\"1\",\"-128\",\"0\",\"127\",\"255\",\"SMALLINT\",\"2\",\"-32768\",\"0\",\"32767\",\"65535\",\"MEDIUMINT\",\"3\",\"-8388608\",\"0\",\"8388607\",\"16777215\",\"INT\",\"4\",\"-2147483648\",\"0\",\"2147483647\",\"4294967295\",\"BIGINT\",\"8\",\"-263\",\"0\",\"263-1\",\"264-1\",\" 以 TINYINT 为例， 1 bytes = 8 bit，在有符号情况下值可用空间为 7 bit 所以最多可以表示正负 27 范围内的整数，无符号情况下则可以使用 8 bit 的空间，所以正数表示范围增加到 28 , 但是可表示的数的数量不变，其它类型同理，所以只要简单记住每个类型占多少字节，即可推算出他们的表示范围\",\"图 1：tinyint\"]},\"11\":{\"h\":\"Overflow\",\"t\":[\" 创建下表用于测试\",\"CREATE TABLE `student` ( `id` bigint unsigned NOT NULL AUTO_INCREMENT, `name` varchar(191) NOT NULL, `age` tinyint NOT NULL, PRIMARY KEY (`id`), UNIQUE KEY `name` (`name`) ) ENGINE = InnoDB AUTO_INCREMENT = 13 DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci \",\"图 2：SQL - 1 output\",\" 插入测试数据，第二条记录数据超出范围，无法插入\",\"INSERT INTO `student` (`name`, `age`) values ('zhangsan', 127), ('lisi', 128); \",\"图 3：SQL - 2 output\",\" 现在修改数据库模式，再次尝试插入超过范围的值\",\"SET sql_mode = ''; \",\"图 4：SQL - 3 output\",\" 插入成功，但是数据被截断。\",\"INSERT INTO `student` (`name`, `age`) values ('wangwu', 256); SELECT * FROM student; \",\"图 5：SQL - 4 L1 output\",\"图 6：SQL - 4 L2 output\",\" 进行运算，超出类型范围的结果依然运算正常，并且结果与二元运算的另一个参数的类型不一定等于原数据类型。\",\"SELECT sum(age) FROM student; SELECT age + 200 FROM student; SELECT age * 10 FROM student; SELECT age / 1000 FROM student; SELECT age + 0.1 FROM student; \",\"图 7：SQL - 5 L1 ～ L2 output\",\"图 8：SQL - 5 L3 ～ L4 output\",\"图 9：SQL - 5 L5 output\",\" 把以下查询结果保存为视图，观察数据类型\",\"CREATE VIEW tmp_view AS SELECT age + 200, age + 40000, age * 0.001, age / 1000 FROM student; DESC tmp_view; SELECT * FROM tmp_view; \",\"图 10：SQL - 6 output\",\" 不难发现，age + 200 与 age + 4000 虽然分别在 SMALLINT 与 MEDIUMINT 范围内，但是数据类型为 int，转为小数时会变为 decimal 类型，并且使用满足当前计算的最少的小数位，而且由于除法的原因， age / 1000 可以为 NULL\",\"SELECT 1024 / 0; \",\"图 11：SQL - 7 output\",\" 我们在建表时尽量不要使用 CREATE TABLE AS 语句，这样可能会造成资源的浪费，并且可能会打破某些本该存在的约束。\",\" 现在我们尝试把运算结果使用 UPDATE 保存到原列中，与普通的 INSERT 一样，数据库会告诉我们值超出范围\",\"UPDATE student SET age = (age + 200); \",\"图 12：SQL - 8 output\",\" 修改模式后，插入成功，但是数据被截断\",\"SET sql_mode = ''; UPDATE student SET age = (age + 200); SELECT * FROM student; \",\"图 12：SQL - 9 L1 output\",\"图 13：SQL - 9 L2 output\",\"图 14：SQL - 9 L3 output\"]},\"12\":{\"h\":\"Operation\",\"t\":[\" 现在使用 BIGINT 的最大值创建一个视图，再次进行运算会发生什么呢？\",\"CREATE VIEW tmp_max AS SELECT 9223372036854775807 AS bnt; SELECT * FROM tmp_max; DESC tmp_max; \",\"图 15：SQL - 10 output\",\" 不同于 TINYINT，BIGINT 无法进行超出自身范围的运算，毕竟它已经是整数类型中最大的了。\",\"SELECT bnt + 1 FROM tmp_max; SELECT age + 1 FROM student; \",\"图 16：SQL - 11 output\",\" 切换模式后依然无法进行运算\",\"SET sql_mode = ''; SELECT bnt + 1 FROM tmp_max; \",\"图 17：SQL - 12 output\",\" 转换为 UNSIGNED 之后，运算成功，但是范围也只是提高了一倍，并且不能为负数\",\" SELECT CAST(bnt AS UNSIGNED) + 1 FROM tmp_max; \",\"图 18：SQL - 13 output\",\" DECIMAL 类型最多允许储存 65 位的数，转换之后，我们可运算的范围会大幅提升\",\"SELECT (bnt * 0.1) * 100000000000000000000000000000000000000000000000000000000000000 AS dmx FROM tmp_max; \",\"图 19：SQL - 14 output\",\" 保存为视图后显示的类型为 decimal(65,1)，但是仔细数一数结果的位数会发现它有 80 位，这是因为我们创建的是 VIEW。\",\"CREATE VIEW tmp_view_decimal AS SELECT (bnt * 0.1) * 100000000000000000000000000000000000000000000000000000000000000 AS dmx FROM tmp_max; DESC tmp_view_decimal; SELECT * FROM tmp_view_decimal; \",\"图 20：SQL - 15 output\",\" 当进行相同的计算并储存为 TABLE 时，数据库就会告诉我们超出范围。再次调整运算的大小，把结果缩小到 65 位以内，插入成功。所以使用 DECIMAL 类型可以进行非常可观的大数运算。\",\"CREATE TABLE tmp_decimal AS SELECT (bnt * 0.1) * 10000000000000000000000000000000000000000000000 AS dmx FROM tmp_max; SELECT * FROM tmp_decimal; DESC tmp_decimal; \",\"图 21：SQL - 16 output\"]},\"13\":{\"c\":[\"MySQL\"]},\"14\":{\"c\":[\"integer\"]},\"15\":{\"h\":\"MySQL-Buffer pool\",\"t\":[\" 由于硬盘读写速度等问题，在一般的数据库中进行 I/O 操作是非常耗时的，MySQL 为了减少 I/O 操作的次数，使用了 Buffer pool 机制，通过它，MySQL 可以把常用的数据储存在内存中，这样下次操作相同的数据时直接从内存中读取即可，不需要再去硬盘中抽取数据而执行耗时的 I/O 操作\"]},\"16\":{\"h\":\"规则\",\"t\":[\" MySQL 使用优化过的 LRU（Least Recently Used） 算法管理内存中的数据，管理数据的最小单位是 page，而一个 page 中有若干条数据，page 的大小由系统变量 @@innodb_page_size 来决定，默认为 16KB，存储相关的内容在本章节不再展开讨论\",\" MySQL 中的 LRU 使用链表来实现，如 图一 所示，Buffer pool 分为 New 与 Old 两部分，它们使用 Midpoint 来分隔，其中 New 部分占大约 5/8 的空间 Old 占大约 3/8 的空间，图的右侧标注了数据的流向，新访问的 page 会储存到 New 中，不常使用的 page 会放到 Old 中，最后 Old 中的内容会被逐渐清出\",\" 要注意的是，与传统 LRU 算法不同，新读取的 page 不会立即插入 New 部分的 Head ，而是插入 Old 部分的 Head ，当这些 page 再次被使用时，才会被放到 New 部分的 Head ，这有效防止了某次不常用的大规模扫描把 New 部分整体替换掉，并且 MySQL 还通过 @@innodb_old_blocks_time 对 New 部分进行了保护，在 innodb_old_blocks_time 时间内，不论上述所说的大规模 page 被访问多少次，都不会进入 New 部分\",\"image.png\"]},\"17\":{\"h\":\"状态\",\"t\":[\" 通过变量 @@innodb_buffer_pool_size 可以查看 Buffer pool 的大小，单位是字节，把它除 1024（Bit -> KB） 再除 16 就是我们 Buffer pool 中可以缓存的 page 的大小\",\"SELECT @@innodb_buffer_pool_size; +---------------------------+ | @@innodb_buffer_pool_size | +---------------------------+ | 134217728 | +---------------------------+ 1 row in set (0.00 sec) \",\" 通过 SQL-2 输出中的 BUFFER POOL AND MEMORY 部分，我们可以查看 Buffer pool 的状态\",\"SHOW ENGINE INNODB STATUS; ---------------------- BUFFER POOL AND MEMORY ---------------------- Total large memory allocated 0 Dictionary memory allocated 604739 Buffer pool size 8192 Free buffers 1 Database pages 7914 Old database pages 2939 Modified db pages 0 Pending reads 0 Pending writes: LRU 0, flush list 0, single page 0 Pages made young 249762, not young 452654 0.02 youngs/s, 350.29 non-youngs/s Pages read 15114, created 173, written 858 54.26 reads/s, 0.00 creates/s, 0.00 writes/s Buffer pool hit rate 936 / 1000, young-making rate 0 / 1000 not 413 / 1000 Pages read ahead 51.97/s, evicted without access 0.12/s, Random read ahead 0.00/s LRU len: 7914, unzip_LRU len: 0 I/O sum[135]:cur[0], unzip sum[0]:cur[0] \",\"SQL-2 L8 的 Buffer pool size 是分配给 Buffer pool 的总 page 大小（@@innodb_buffer_pool_size / 1024 / 16），对应的，Free buffers 属性就是空闲的 page 数量\",\" 我们可以调整 Buffer pool 的大小，但这要符合 @@innodb_buffer_pool_instances * @@innodb_buffer_pool_chunk_size | @@innodb_buffer_pool_size 的条件，如果不满足则会向上取整，直到 Buffer pool 等于两者的乘积或者成为倍数关系，SQL-3 展示了这种关系以及设置过程，另外适当设置（大小在几个 G 的情况下） @@innodb_buffer_pool_instances 数量可以提高 Buffer pool 在并发使用时的效率，详见官方文档 Configuring Multiple Buffer Pool Instances\",\"SELECT @@innodb_buffer_pool_instances; +--------------------------------+ | @@innodb_buffer_pool_instances | +--------------------------------+ | 1 | +--------------------------------+ 1 row in set (0.56 sec) SELECT @@innodb_buffer_pool_chunk_size/1024/1024/1024; +------------------------------------------------+ | @@innodb_buffer_pool_chunk_size/1024/1024/1024 | +------------------------------------------------+ | 0.125000000000 | +------------------------------------------------+ 1 row in set (0.00 sec) SELECT @@innodb_buffer_pool_size/1024/1024/1024; +------------------------------------------+ | @@innodb_buffer_pool_size/1024/1024/1024 | +------------------------------------------+ | 0.125000000000 | +------------------------------------------+ 1 row in set (0.00 sec) --------------------------------------------------------- SET GLOBAL innodb_buffer_pool_size = 201326592; -- 0.125G * 1.5 SELECT @@innodb_buffer_pool_size/1024/1024/1024; +------------------------------------------+ | @@innodb_buffer_pool_size/1024/1024/1024 | +------------------------------------------+ | 0.250000000000 | -- 0.125G * 2 +------------------------------------------+ 1 row in set (0.00 sec) \",\"L10 的 Database pages 为 Buffer pool 的 LRU 链表所占的总页面大小，Old database pages 为 Buffer pool 中 Old 部分的页面大小，默认在不变动 Midpoint 的情况下 Old database pages / Database pages = 3.7 （3/8），读者们可以一根据自己具体需求来进行设置\",\"SELECT @@innodb_old_blocks_pct; +-------------------------+ | @@innodb_old_blocks_pct | +-------------------------+ | 37 | +-------------------------+ 1 row in set (0.00 sec) \",\"L16 与 L18、L20 中的 /s 代表每秒平均的值，统计范围是从上次 SHOW ENGINE INNODB STATUS 到这次 SHOW ENGINE INNODB STATUS 之间\",\"youngs/s 表示在作用时间内 Old 部分进入到 New 部分的每秒的平均数量，如果此参数过低可能有以下两种情况\",\"近期进行过大规模扫描，这种情况下大规模 page 会可能会占满 Old 部分，而这些大量扫描的 page 大概率不会常用到，所以导致 youngs/s 数值过低\",\"如果没有进行过大规模扫描但是 youngs/s 依然非常低，说明大部分 page 在被再次读取到之前就已经进入 Old 部分的尾部并且清除了，这时可以考虑增加 Old 部分的大小，这样 page 在 Old 部分停留的时间就会更长，被再次访问的概率也就会更高。另外通过降低@@innodb_old_blocks_time 也可以增加 Old 部分中 page 被读取到 New 部分的概率\",\" 在 SQL-5 的演示中， @@innodb_old_blocks_time 默认为 1 秒，我们可以像设置其它变量那样设置它\",\"SELECT @@innodb_old_blocks_time; +--------------------------+ | @@innodb_old_blocks_time | +--------------------------+ | 1000 | +--------------------------+ 1 row in set (0.00 sec) SET GLOBAL innodb_old_blocks_time = 1001; SELECT @@innodb_old_blocks_time; +--------------------------+ | @@innodb_old_blocks_time | +--------------------------+ | 1001 | +--------------------------+ 1 row in set (0.00 sec) \",\" non-youns/s 表示在作用时间内，page 平均每秒移动到 Old 部分的 page 数量，如果进行大量扫描之后没有看到较高的 non-youns/s，说明 @@innodb_old_blocks_time 较低，导致大量不常用数据进入到了 New 部分，所以应该考虑增加@@innodb_old_blocks_time\",\"L19 的 Buffer pool hit rate 代表 Buffer pool 的命中率，young-making rate 是因为访问使 page 进入到 New 部分的命中率，not 则是访问 page 之后没有进入到 New 部分的命中率，在 page 处于 New 部分前 1/4 或不满足 @@innodb_old_blocks_time 设定的时间时会发生这种情况并使 not 值发生变化\",\"  在实际使用中，我们需要结合 MySQL 所处服务器的情况以及具体业务来优化 Buffer pool，保证它的命中率，\\n其它参数具体说明可以参考官方文档 InnoDB Buffer Pool Metrics\"]},\"18\":{\"c\":[\"MySQL\"]},\"19\":{\"c\":[\"Innodb\",\"Buffer pool\"]},\"20\":{\"h\":\"Mongo\"},\"21\":{\"h\":\"Database\"},\"22\":{\"h\":\"Data Type\"},\"23\":{\"h\":\"Mysql\"},\"24\":{\"h\":\"Innodb\"}},\"dirtCount\":0,\"index\":[[\"保证它的命中率\",{\"1\":{\"17\":1}}],[\"保存为视图后显示的类型为\",{\"1\":{\"12\":1}}],[\"保存到原列中\",{\"1\":{\"11\":1}}],[\"值发生变化\",{\"1\":{\"17\":1}}],[\"设定的时间时会发生这种情况并使\",{\"1\":{\"17\":1}}],[\"或不满足\",{\"1\":{\"17\":1}}],[\"处于\",{\"1\":{\"17\":1}}],[\"则是访问\",{\"1\":{\"17\":1}}],[\"进入到\",{\"1\":{\"17\":1}}],[\"进行运算\",{\"1\":{\"11\":1}}],[\"是因为访问使\",{\"1\":{\"17\":1}}],[\"是分配给\",{\"1\":{\"17\":1}}],[\"代表\",{\"1\":{\"17\":1}}],[\"代表每秒平均的值\",{\"1\":{\"17\":1}}],[\"导致大量不常用数据进入到了\",{\"1\":{\"17\":1}}],[\"较低\",{\"1\":{\"17\":1}}],[\"说明\",{\"1\":{\"17\":1}}],[\"说明大部分\",{\"1\":{\"17\":1}}],[\"平均每秒移动到\",{\"1\":{\"17\":1}}],[\"秒\",{\"1\":{\"17\":1}}],[\"也可以增加\",{\"1\":{\"17\":1}}],[\"另外通过降低\",{\"1\":{\"17\":1}}],[\"另外适当设置\",{\"1\":{\"17\":1}}],[\"被读取到\",{\"1\":{\"17\":1}}],[\"被再次访问的概率也就会更高\",{\"1\":{\"17\":1}}],[\"被访问多少次\",{\"1\":{\"16\":1}}],[\"依然非常低\",{\"1\":{\"17\":1}}],[\"大概率不会常用到\",{\"1\":{\"17\":1}}],[\"大小在几个\",{\"1\":{\"17\":1}}],[\"大小\",{\"1\":{\"17\":1}}],[\"近期进行过大规模扫描\",{\"1\":{\"17\":1}}],[\"表示在作用时间内\",{\"1\":{\"17\":2}}],[\"之间\",{\"1\":{\"17\":1}}],[\"之后没有进入到\",{\"1\":{\"17\":1}}],[\"之后\",{\"1\":{\"12\":1}}],[\"到这次\",{\"1\":{\"17\":1}}],[\"统计范围是从上次\",{\"1\":{\"17\":1}}],[\"读者们可以一根据自己具体需求来进行设置\",{\"1\":{\"17\":1}}],[\"默认在不变动\",{\"1\":{\"17\":1}}],[\"默认为\",{\"1\":{\"16\":1,\"17\":1}}],[\"链表所占的总页面大小\",{\"1\":{\"17\":1}}],[\"详见官方文档\",{\"1\":{\"17\":1}}],[\"global\",{\"1\":{\"17\":2}}],[\"g\",{\"1\":{\"17\":1}}],[\"展示了这种关系以及设置过程\",{\"1\":{\"17\":1}}],[\"等于两者的乘积或者成为倍数关系\",{\"1\":{\"17\":1}}],[\"直到\",{\"1\":{\"17\":1}}],[\"但这要符合\",{\"1\":{\"17\":1}}],[\"但是仔细数一数结果的位数会发现它有\",{\"1\":{\"12\":1}}],[\"但是范围也只是提高了一倍\",{\"1\":{\"12\":1}}],[\"但是数据类型为\",{\"1\":{\"11\":1}}],[\"但是数据被截断\",{\"1\":{\"11\":2}}],[\"但是可表示的数的数量不变\",{\"1\":{\"10\":1}}],[\"数值过低\",{\"1\":{\"17\":1}}],[\"数量可以提高\",{\"1\":{\"17\":1}}],[\"数量\",{\"1\":{\"17\":2}}],[\"数据库就会告诉我们超出范围\",{\"1\":{\"12\":1}}],[\"数据库会告诉我们值超出范围\",{\"1\":{\"11\":1}}],[\"属性就是空闲的\",{\"1\":{\"17\":1}}],[\"evicted\",{\"1\":{\"17\":1}}],[\"engine\",{\"1\":{\"11\":1,\"17\":3}}],[\"engineer\",{\"1\":{\"2\":1}}],[\"输出中的\",{\"1\":{\"17\":1}}],[\"random\",{\"1\":{\"17\":1}}],[\"rate\",{\"1\":{\"17\":4}}],[\"read\",{\"1\":{\"17\":3}}],[\"reads\",{\"1\":{\"17\":2}}],[\"recently\",{\"1\":{\"16\":1}}],[\"row\",{\"1\":{\"17\":8}}],[\"|\",{\"1\":{\"17\":33}}],[\"就是我们\",{\"1\":{\"17\":1}}],[\"再除\",{\"1\":{\"17\":1}}],[\"再次被使用时\",{\"1\":{\"16\":1}}],[\"再次调整运算的大小\",{\"1\":{\"12\":1}}],[\"再次进行运算会发生什么呢\",{\"1\":{\"12\":1}}],[\"再次尝试插入超过范围的值\",{\"1\":{\"11\":1}}],[\"kb\",{\"1\":{\"17\":1}}],[\"key\",{\"1\":{\"11\":2}}],[\">\",{\"1\":{\"17\":1}}],[\"单位是字节\",{\"1\":{\"17\":1}}],[\"通过\",{\"1\":{\"17\":1}}],[\"通过变量\",{\"1\":{\"17\":1}}],[\"通过它\",{\"1\":{\"15\":1}}],[\"状态\",{\"0\":{\"17\":1}}],[\"都不会进入\",{\"1\":{\"16\":1}}],[\"对应的\",{\"1\":{\"17\":1}}],[\"对\",{\"1\":{\"16\":1}}],[\"还通过\",{\"1\":{\"16\":1}}],[\"才会被放到\",{\"1\":{\"16\":1}}],[\"当这些\",{\"1\":{\"16\":1}}],[\"当进行相同的计算并储存为\",{\"1\":{\"12\":1}}],[\"部分前\",{\"1\":{\"17\":1}}],[\"部分中\",{\"1\":{\"17\":1}}],[\"部分停留的时间就会更长\",{\"1\":{\"17\":1}}],[\"部分进入到\",{\"1\":{\"17\":1}}],[\"部分进行了保护\",{\"1\":{\"16\":1}}],[\"部分\",{\"1\":{\"16\":1,\"17\":3}}],[\"部分整体替换掉\",{\"1\":{\"16\":1}}],[\"部分的命中率\",{\"1\":{\"17\":2}}],[\"部分的概率\",{\"1\":{\"17\":1}}],[\"部分的大小\",{\"1\":{\"17\":1}}],[\"部分的尾部并且清除了\",{\"1\":{\"17\":1}}],[\"部分的每秒的平均数量\",{\"1\":{\"17\":1}}],[\"部分的页面大小\",{\"1\":{\"17\":1}}],[\"部分的\",{\"1\":{\"16\":3,\"17\":1}}],[\"部分占大约\",{\"1\":{\"16\":1}}],[\"新读取的\",{\"1\":{\"16\":1}}],[\"新访问的\",{\"1\":{\"16\":1}}],[\"算法不同\",{\"1\":{\"16\":1}}],[\"算法管理内存中的数据\",{\"1\":{\"16\":1}}],[\"要注意的是\",{\"1\":{\"16\":1}}],[\"最后\",{\"1\":{\"16\":1}}],[\"会可能会占满\",{\"1\":{\"17\":1}}],[\"会放到\",{\"1\":{\"16\":1}}],[\"会储存到\",{\"1\":{\"16\":1}}],[\"占大约\",{\"1\":{\"16\":1}}],[\"其它参数具体说明可以参考官方文档\",{\"1\":{\"17\":1}}],[\"其它类型同理\",{\"1\":{\"10\":1}}],[\"其中\",{\"1\":{\"16\":1}}],[\"来分隔\",{\"1\":{\"16\":1}}],[\"来决定\",{\"1\":{\"16\":1}}],[\"它们使用\",{\"1\":{\"16\":1}}],[\"两部分\",{\"1\":{\"16\":1}}],[\"分为\",{\"1\":{\"16\":1}}],[\"所处服务器的情况以及具体业务来优化\",{\"1\":{\"17\":1}}],[\"所示\",{\"1\":{\"16\":1}}],[\"所以应该考虑增加\",{\"1\":{\"17\":1}}],[\"所以导致\",{\"1\":{\"17\":1}}],[\"所以使用\",{\"1\":{\"12\":1}}],[\"所以只要简单记住每个类型占多少字节\",{\"1\":{\"10\":1}}],[\"所以正数表示范围增加到\",{\"1\":{\"10\":1}}],[\"所以最多可以表示正负\",{\"1\":{\"10\":1}}],[\"如果进行大量扫描之后没有看到较高的\",{\"1\":{\"17\":1}}],[\"如果没有进行过大规模扫描但是\",{\"1\":{\"17\":1}}],[\"如果此参数过低可能有以下两种情况\",{\"1\":{\"17\":1}}],[\"如果不满足则会向上取整\",{\"1\":{\"17\":1}}],[\"如\",{\"1\":{\"16\":1}}],[\"中可以缓存的\",{\"1\":{\"17\":1}}],[\"中\",{\"1\":{\"16\":2,\"17\":1}}],[\"中的内容会被逐渐清出\",{\"1\":{\"16\":1}}],[\"中的\",{\"1\":{\"16\":1,\"17\":1}}],[\"中有若干条数据\",{\"1\":{\"16\":1}}],[\"存储相关的内容在本章节不再展开讨论\",{\"1\":{\"16\":1}}],[\"而这些大量扫描的\",{\"1\":{\"17\":1}}],[\"而是插入\",{\"1\":{\"16\":1}}],[\"而一个\",{\"1\":{\"16\":1}}],[\"而且由于除法的原因\",{\"1\":{\"11\":1}}],[\"管理数据的最小单位是\",{\"1\":{\"16\":1}}],[\"规则\",{\"0\":{\"16\":1}}],[\"可以查看\",{\"1\":{\"17\":1}}],[\"可以把常用的数据储存在内存中\",{\"1\":{\"15\":1}}],[\"可以为\",{\"1\":{\"11\":1}}],[\"机制\",{\"1\":{\"15\":1}}],[\"使用链表来实现\",{\"1\":{\"16\":1}}],[\"使用优化过的\",{\"1\":{\"16\":1}}],[\"使用了\",{\"1\":{\"15\":1}}],[\"使用指南\",{\"2\":{\"7\":1,\"8\":1}}],[\"操作\",{\"1\":{\"15\":1}}],[\"操作的次数\",{\"1\":{\"15\":1}}],[\"操作是非常耗时的\",{\"1\":{\"15\":1}}],[\"为\",{\"1\":{\"17\":2}}],[\"为了减少\",{\"1\":{\"15\":1}}],[\"为例\",{\"1\":{\"10\":1}}],[\"在实际使用中\",{\"1\":{\"17\":1}}],[\"在被再次读取到之前就已经进入\",{\"1\":{\"17\":1}}],[\"在并发使用时的效率\",{\"1\":{\"17\":1}}],[\"在\",{\"1\":{\"16\":1,\"17\":3}}],[\"在一般的数据库中进行\",{\"1\":{\"15\":1}}],[\"在有符号情况下值可用空间为\",{\"1\":{\"10\":1}}],[\"由于硬盘读写速度等问题\",{\"1\":{\"15\":1}}],[\"pct\",{\"1\":{\"17\":2}}],[\"pending\",{\"1\":{\"17\":2}}],[\"png\",{\"1\":{\"16\":1}}],[\"pages\",{\"1\":{\"17\":10}}],[\"page\",{\"1\":{\"16\":9,\"17\":14}}],[\"pool\",{\"0\":{\"15\":1},\"1\":{\"15\":1,\"16\":1,\"17\":36},\"2\":{\"19\":1}}],[\"primary\",{\"1\":{\"11\":1}}],[\"programming\",{\"1\":{\"2\":1}}],[\"把它除\",{\"1\":{\"17\":1}}],[\"把结果缩小到\",{\"1\":{\"12\":1}}],[\"把以下查询结果保存为视图\",{\"1\":{\"11\":1}}],[\"时间内\",{\"1\":{\"16\":1}}],[\"时\",{\"1\":{\"12\":1}}],[\"这时可以考虑增加\",{\"1\":{\"17\":1}}],[\"这种情况下大规模\",{\"1\":{\"17\":1}}],[\"这有效防止了某次不常用的大规模扫描把\",{\"1\":{\"16\":1}}],[\"这样\",{\"1\":{\"17\":1}}],[\"这样下次操作相同的数据时直接从内存中读取即可\",{\"1\":{\"15\":1}}],[\"这样可能会造成资源的浪费\",{\"1\":{\"11\":1}}],[\"这是因为我们创建的是\",{\"1\":{\"12\":1}}],[\"位以内\",{\"1\":{\"12\":1}}],[\"位\",{\"1\":{\"12\":1}}],[\"位的数\",{\"1\":{\"12\":1}}],[\"data\",{\"0\":{\"22\":1}}],[\"database\",{\"0\":{\"21\":1},\"1\":{\"17\":6}}],[\"db\",{\"1\":{\"17\":1}}],[\"dictionary\",{\"1\":{\"17\":1}}],[\"dmx\",{\"1\":{\"12\":3}}],[\"decimal\",{\"1\":{\"11\":1,\"12\":9}}],[\"desc\",{\"1\":{\"11\":1,\"12\":3}}],[\"default\",{\"1\":{\"11\":1}}],[\"demo\",{\"0\":{\"6\":1}}],[\"developer\",{\"1\":{\"2\":1}}],[\"我们需要结合\",{\"1\":{\"17\":1}}],[\"我们可以像设置其它变量那样设置它\",{\"1\":{\"17\":1}}],[\"我们可以调整\",{\"1\":{\"17\":1}}],[\"我们可以查看\",{\"1\":{\"17\":1}}],[\"我们可运算的范围会大幅提升\",{\"1\":{\"12\":1}}],[\"我们在建表时尽量不要使用\",{\"1\":{\"11\":1}}],[\"运算成功\",{\"1\":{\"12\":1}}],[\"转换之后\",{\"1\":{\"12\":1}}],[\"转换为\",{\"1\":{\"12\":1}}],[\"转为小数时会变为\",{\"1\":{\"11\":1}}],[\"切换模式后依然无法进行运算\",{\"1\":{\"12\":1}}],[\"毕竟它已经是整数类型中最大的了\",{\"1\":{\"12\":1}}],[\"不论上述所说的大规模\",{\"1\":{\"16\":1}}],[\"不会立即插入\",{\"1\":{\"16\":1}}],[\"不常使用的\",{\"1\":{\"16\":1}}],[\"不需要再去硬盘中抽取数据而执行耗时的\",{\"1\":{\"15\":1}}],[\"不同于\",{\"1\":{\"12\":1}}],[\"不难发现\",{\"1\":{\"11\":1}}],[\"的命中率\",{\"1\":{\"17\":1}}],[\"的演示中\",{\"1\":{\"17\":1}}],[\"的情况下\",{\"1\":{\"17\":2}}],[\"的条件\",{\"1\":{\"17\":1}}],[\"的总\",{\"1\":{\"17\":1}}],[\"的\",{\"1\":{\"17\":4}}],[\"的状态\",{\"1\":{\"17\":1}}],[\"的大小\",{\"1\":{\"17\":3}}],[\"的大小由系统变量\",{\"1\":{\"16\":1}}],[\"的最大值创建一个视图\",{\"1\":{\"12\":1}}],[\"的空间\",{\"1\":{\"10\":1,\"16\":2}}],[\"修改模式后\",{\"1\":{\"11\":1}}],[\"一样\",{\"1\":{\"11\":1}}],[\"现在使用\",{\"1\":{\"12\":1}}],[\"现在我们尝试把运算结果使用\",{\"1\":{\"11\":1}}],[\"现在修改数据库模式\",{\"1\":{\"11\":1}}],[\"语句\",{\"1\":{\"11\":1}}],[\"并且\",{\"1\":{\"16\":1}}],[\"并且不能为负数\",{\"1\":{\"12\":1}}],[\"并且可能会打破某些本该存在的约束\",{\"1\":{\"11\":1}}],[\"并且使用满足当前计算的最少的小数位\",{\"1\":{\"11\":1}}],[\"并且结果与二元运算的另一个参数的类型不一定等于原数据类型\",{\"1\":{\"11\":1}}],[\"类型可以进行非常可观的大数运算\",{\"1\":{\"12\":1}}],[\"类型最多允许储存\",{\"1\":{\"12\":1}}],[\"类型\",{\"1\":{\"11\":1}}],[\"范围内\",{\"1\":{\"11\":1}}],[\"范围内的整数\",{\"1\":{\"10\":1}}],[\"虽然分别在\",{\"1\":{\"11\":1}}],[\"与传统\",{\"1\":{\"16\":1}}],[\"与普通的\",{\"1\":{\"11\":1}}],[\"与\",{\"1\":{\"11\":2,\"16\":1,\"17\":1}}],[\"view\",{\"1\":{\"11\":4,\"12\":6}}],[\"varchar\",{\"1\":{\"11\":1}}],[\"values\",{\"1\":{\"11\":2}}],[\"value\",{\"1\":{\"10\":4}}],[\"观察数据类型\",{\"1\":{\"11\":1}}],[\"97\",{\"1\":{\"17\":1}}],[\"936\",{\"1\":{\"17\":1}}],[\"9223372036854775807\",{\"1\":{\"12\":1}}],[\"9\",{\"1\":{\"11\":4}}],[\"～\",{\"1\":{\"11\":2}}],[\"+\",{\"1\":{\"11\":8,\"12\":4,\"17\":48}}],[\"超出类型范围的结果依然运算正常\",{\"1\":{\"11\":1}}],[\"604739\",{\"1\":{\"17\":1}}],[\"65\",{\"1\":{\"12\":3}}],[\"65535\",{\"1\":{\"10\":1}}],[\"6\",{\"1\":{\"11\":2}}],[\"l8\",{\"1\":{\"17\":1}}],[\"len\",{\"1\":{\"17\":2}}],[\"least\",{\"1\":{\"16\":1}}],[\"list\",{\"1\":{\"17\":1}}],[\"lisi\",{\"1\":{\"11\":1}}],[\"large\",{\"1\":{\"17\":1}}],[\"lru\",{\"1\":{\"16\":3,\"17\":4}}],[\"l5\",{\"1\":{\"11\":1}}],[\"l4\",{\"1\":{\"11\":1}}],[\"l3\",{\"1\":{\"11\":2}}],[\"l20\",{\"1\":{\"17\":1}}],[\"l2\",{\"1\":{\"11\":3}}],[\"l19\",{\"1\":{\"17\":1}}],[\"l18\",{\"1\":{\"17\":1}}],[\"l16\",{\"1\":{\"17\":1}}],[\"l10\",{\"1\":{\"17\":1}}],[\"l1\",{\"1\":{\"11\":3}}],[\"56\",{\"1\":{\"17\":1}}],[\"51\",{\"1\":{\"17\":1}}],[\"54\",{\"1\":{\"17\":1}}],[\"5\",{\"1\":{\"11\":4,\"16\":1,\"17\":2}}],[\"插入成功\",{\"1\":{\"11\":2,\"12\":1}}],[\"插入测试数据\",{\"1\":{\"11\":1}}],[\"无法进行超出自身范围的运算\",{\"1\":{\"12\":1}}],[\"无法插入\",{\"1\":{\"11\":1}}],[\"无符号情况下则可以使用\",{\"1\":{\"10\":1}}],[\"第二条记录数据超出范围\",{\"1\":{\"11\":1}}],[\"used\",{\"1\":{\"16\":1}}],[\"update\",{\"1\":{\"11\":3}}],[\"utf8mb4\",{\"1\":{\"11\":2}}],[\"unzip\",{\"1\":{\"17\":2}}],[\"unique\",{\"1\":{\"11\":1}}],[\"unsigned\",{\"1\":{\"10\":2,\"11\":1,\"12\":2}}],[\"non\",{\"1\":{\"17\":3}}],[\"not\",{\"1\":{\"11\":3,\"17\":4}}],[\"new\",{\"1\":{\"16\":8,\"17\":6}}],[\"null\",{\"1\":{\"11\":4}}],[\"name\",{\"1\":{\"2\":1}}],[\"`age`\",{\"1\":{\"11\":3}}],[\"`name`\",{\"1\":{\"11\":5}}],[\"`id`\",{\"1\":{\"11\":2}}],[\"`student`\",{\"1\":{\"11\":3}}],[\"创建下表用于测试\",{\"1\":{\"11\":1}}],[\"图的右侧标注了数据的流向\",{\"1\":{\"16\":1}}],[\"图一\",{\"1\":{\"16\":1}}],[\"图\",{\"1\":{\"10\":1,\"11\":14,\"12\":7}}],[\"即可推算出他们的表示范围\",{\"1\":{\"10\":1}}],[\"7914\",{\"1\":{\"17\":2}}],[\"7\",{\"1\":{\"10\":1,\"11\":2,\"17\":1}}],[\"=\",{\"1\":{\"10\":1,\"11\":8,\"12\":1,\"17\":3}}],[\"以\",{\"1\":{\"10\":1}}],[\"858\",{\"1\":{\"17\":1}}],[\"8192\",{\"1\":{\"17\":1}}],[\"80\",{\"1\":{\"12\":1}}],[\"8\",{\"1\":{\"10\":3,\"11\":2,\"16\":2,\"17\":1}}],[\"8388607\",{\"1\":{\"10\":1}}],[\"8388608\",{\"1\":{\"10\":1}}],[\"413\",{\"1\":{\"17\":1}}],[\"452654\",{\"1\":{\"17\":1}}],[\"4000\",{\"1\":{\"11\":1}}],[\"40000\",{\"1\":{\"11\":1}}],[\"4294967295\",{\"1\":{\"10\":1}}],[\"4\",{\"1\":{\"10\":1,\"11\":3,\"17\":1}}],[\"37\",{\"1\":{\"17\":1}}],[\"350\",{\"1\":{\"17\":1}}],[\"3\",{\"1\":{\"10\":1,\"11\":2,\"16\":1,\"17\":3}}],[\"32767\",{\"1\":{\"10\":1}}],[\"32768\",{\"1\":{\"10\":1}}],[\"29\",{\"1\":{\"17\":1}}],[\"2939\",{\"1\":{\"17\":1}}],[\"249762\",{\"1\":{\"17\":1}}],[\"21\",{\"1\":{\"12\":1}}],[\"2147483647\",{\"1\":{\"10\":1}}],[\"2147483648\",{\"1\":{\"10\":1}}],[\"201326592\",{\"1\":{\"17\":1}}],[\"20\",{\"1\":{\"12\":1}}],[\"200\",{\"1\":{\"11\":5}}],[\"250000000000\",{\"1\":{\"17\":1}}],[\"256\",{\"1\":{\"11\":1}}],[\"255\",{\"1\":{\"10\":1}}],[\"28\",{\"1\":{\"10\":1}}],[\"27\",{\"1\":{\"10\":1}}],[\"26\",{\"1\":{\"17\":1}}],[\"264\",{\"1\":{\"10\":1}}],[\"263\",{\"1\":{\"10\":2}}],[\"2\",{\"1\":{\"10\":1,\"11\":2,\"17\":3}}],[\"02\",{\"1\":{\"17\":1}}],[\"00\",{\"1\":{\"17\":10}}],[\"001\",{\"1\":{\"11\":1}}],[\"0900\",{\"1\":{\"11\":1}}],[\"0\",{\"1\":{\"10\":5,\"11\":3,\"12\":3,\"17\":29}}],[\"19\",{\"1\":{\"12\":1}}],[\"191\",{\"1\":{\"11\":1}}],[\"18\",{\"1\":{\"12\":1}}],[\"173\",{\"1\":{\"17\":1}}],[\"17\",{\"1\":{\"12\":1}}],[\"16kb\",{\"1\":{\"16\":1}}],[\"16\",{\"1\":{\"12\":2,\"17\":2}}],[\"16777215\",{\"1\":{\"10\":1}}],[\"15114\",{\"1\":{\"17\":1}}],[\"15\",{\"1\":{\"12\":2}}],[\"14\",{\"1\":{\"11\":1,\"12\":1}}],[\"11\",{\"1\":{\"11\":1,\"12\":1}}],[\"1001\",{\"1\":{\"17\":2}}],[\"10000000000000000000000000000000000000000000000\",{\"1\":{\"12\":1}}],[\"100000000000000000000000000000000000000000000000000000000000000\",{\"1\":{\"12\":2}}],[\"1000\",{\"1\":{\"11\":3,\"17\":4}}],[\"1024\",{\"1\":{\"11\":1,\"17\":20}}],[\"10\",{\"1\":{\"11\":2,\"12\":1}}],[\"135\",{\"1\":{\"17\":1}}],[\"134217728\",{\"1\":{\"17\":1}}],[\"13\",{\"1\":{\"11\":2,\"12\":1}}],[\"125g\",{\"1\":{\"17\":2}}],[\"125000000000\",{\"1\":{\"17\":2}}],[\"12\",{\"1\":{\"11\":2,\"12\":1,\"17\":1}}],[\"127\",{\"1\":{\"10\":1,\"11\":1}}],[\"128\",{\"1\":{\"10\":1,\"11\":1}}],[\"1\",{\"1\":{\"10\":5,\"11\":2,\"12\":8,\"17\":13}}],[\"页面配置\",{\"2\":{\"8\":1}}],[\"同名微信公众号\",{\"1\":{\"5\":1}}],[\"微信公众号\",{\"0\":{\"5\":1}}],[\"更多内容\",{\"0\":{\"4\":1}}],[\"old\",{\"1\":{\"16\":7,\"17\":23}}],[\"o\",{\"1\":{\"15\":3,\"17\":1}}],[\"operation\",{\"0\":{\"12\":1}}],[\"output\",{\"1\":{\"11\":14,\"12\":7}}],[\"overflow\",{\"0\":{\"11\":1}}],[\"observable\",{\"1\":{\"3\":1}}],[\"on\",{\"1\":{\"3\":1}}],[\"yuque\",{\"1\":{\"3\":1}}],[\"youns\",{\"1\":{\"17\":2}}],[\"youngs\",{\"1\":{\"17\":5}}],[\"young\",{\"1\":{\"17\":4}}],[\"you\",{\"1\":{\"3\":1}}],[\"flush\",{\"1\":{\"17\":1}}],[\"free\",{\"1\":{\"17\":2}}],[\"from\",{\"1\":{\"3\":1,\"11\":9,\"12\":10}}],[\"feature\",{\"0\":{\"10\":1}}],[\"find\",{\"1\":{\"3\":1}}],[\"fullstack\",{\"1\":{\"2\":1}}],[\"✍\",{\"0\":{\"3\":1}}],[\"without\",{\"1\":{\"17\":1}}],[\"written\",{\"1\":{\"17\":1}}],[\"writes\",{\"1\":{\"17\":2}}],[\"writing\",{\"0\":{\"3\":1},\"1\":{\"2\":1}}],[\"wangwu\",{\"1\":{\"11\":1}}],[\"wechat\",{\"1\":{\"3\":1}}],[\"working\",{\"1\":{\"2\":1}}],[\"chunk\",{\"1\":{\"17\":3}}],[\"charset\",{\"1\":{\"11\":1}}],[\"cur\",{\"1\":{\"17\":2}}],[\"currently\",{\"1\":{\"2\":1}}],[\"current\",{\"1\":{\"2\":1}}],[\"cast\",{\"1\":{\"12\":1}}],[\"can\",{\"1\":{\"3\":1}}],[\"ci\",{\"1\":{\"11\":1}}],[\"configuring\",{\"1\":{\"17\":1}}],[\"collate\",{\"1\":{\"11\":1}}],[\"coding\",{\"1\":{\"2\":1,\"3\":1}}],[\"creates\",{\"1\":{\"17\":1}}],[\"created\",{\"1\":{\"17\":1}}],[\"create\",{\"1\":{\"11\":3,\"12\":3}}],[\"🤔\",{\"1\":{\"2\":1}}],[\"blocks\",{\"1\":{\"16\":2,\"17\":12}}],[\"blog\",{\"0\":{\"3\":1},\"1\":{\"3\":2}}],[\"buffers\",{\"1\":{\"17\":2}}],[\"buffer\",{\"0\":{\"15\":1},\"1\":{\"15\":1,\"16\":1,\"17\":36},\"2\":{\"19\":1}}],[\"bnt\",{\"1\":{\"12\":7}}],[\"bit\",{\"1\":{\"10\":3,\"17\":1}}],[\"bigint\",{\"1\":{\"10\":1,\"11\":1,\"12\":2}}],[\"bytes\",{\"1\":{\"10\":2}}],[\"backend\",{\"1\":{\"2\":1}}],[\"been\",{\"1\":{\"2\":1}}],[\"become\",{\"1\":{\"2\":1}}],[\"bokai\",{\"1\":{\"2\":1}}],[\"time\",{\"1\":{\"16\":2,\"17\":10}}],[\"tinyint\",{\"1\":{\"10\":3,\"11\":1,\"12\":1}}],[\"tmp\",{\"1\":{\"11\":3,\"12\":15}}],[\"table\",{\"1\":{\"11\":2,\"12\":2}}],[\"type\",{\"0\":{\"22\":1},\"1\":{\"10\":1}}],[\"transistor\",{\"1\":{\"5\":1}}],[\"trying\",{\"1\":{\"2\":1}}],[\"thinking\",{\"1\":{\"2\":1}}],[\"there\",{\"0\":{\"2\":1}}],[\"total\",{\"1\":{\"17\":1}}],[\"to\",{\"1\":{\"2\":1}}],[\"💻\",{\"1\":{\"2\":1}}],[\"📚\",{\"1\":{\"2\":1}}],[\"👨‍🔬\",{\"1\":{\"2\":1}}],[\"👋\",{\"0\":{\"2\":1}}],[\"s\",{\"1\":{\"17\":14}}],[\"show\",{\"1\":{\"17\":3}}],[\"single\",{\"1\":{\"17\":1}}],[\"size\",{\"1\":{\"16\":1,\"17\":15}}],[\"signed\",{\"1\":{\"10\":2}}],[\"sum\",{\"1\":{\"11\":1,\"17\":2}}],[\"sec\",{\"1\":{\"17\":8}}],[\"select\",{\"1\":{\"11\":10,\"12\":11,\"17\":8}}],[\"set\",{\"1\":{\"11\":4,\"12\":1,\"17\":10}}],[\"sql\",{\"1\":{\"11\":16,\"12\":8,\"17\":4}}],[\"smallint\",{\"1\":{\"10\":1,\"11\":1}}],[\"student\",{\"1\":{\"11\":10,\"12\":1}}],[\"studying\",{\"1\":{\"2\":1}}],[\"storage\",{\"1\":{\"10\":1}}],[\"status\",{\"1\":{\"2\":1,\"17\":3}}],[\"software\",{\"1\":{\"2\":1}}],[\"access\",{\"1\":{\"17\":1}}],[\"ahead\",{\"1\":{\"17\":2}}],[\"allocated\",{\"1\":{\"17\":2}}],[\"also\",{\"1\":{\"3\":1}}],[\"and\",{\"1\":{\"17\":2}}],[\"age\",{\"1\":{\"11\":16,\"12\":1}}],[\"ai\",{\"1\":{\"11\":1}}],[\"auto\",{\"1\":{\"11\":2}}],[\"articles\",{\"1\":{\"3\":1}}],[\"apart\",{\"1\":{\"3\":1}}],[\"as\",{\"1\":{\"2\":1,\"11\":2,\"12\":8}}],[\"am\",{\"1\":{\"2\":1}}],[\"a\",{\"1\":{\"2\":3,\"3\":1}}],[\"mongo\",{\"0\":{\"20\":1}}],[\"modified\",{\"1\":{\"17\":1}}],[\"mode\",{\"1\":{\"11\":2,\"12\":1}}],[\"multiple\",{\"1\":{\"17\":1}}],[\"metrics\",{\"1\":{\"17\":1}}],[\"memory\",{\"1\":{\"17\":4}}],[\"mediumint\",{\"1\":{\"10\":1,\"11\":1}}],[\"midpoint\",{\"1\":{\"16\":1,\"17\":1}}],[\"minimum\",{\"1\":{\"10\":2}}],[\"making\",{\"1\":{\"17\":2}}],[\"made\",{\"1\":{\"17\":1}}],[\"max\",{\"1\":{\"12\":9}}],[\"maximum\",{\"1\":{\"10\":2}}],[\"maintain\",{\"1\":{\"3\":1}}],[\"master\",{\"1\":{\"2\":1}}],[\"m\",{\"1\":{\"2\":1}}],[\"mysql\",{\"0\":{\"9\":1,\"15\":1,\"23\":1},\"1\":{\"15\":2,\"16\":3,\"17\":1},\"2\":{\"13\":1,\"18\":1}}],[\"my\",{\"1\":{\"2\":2,\"3\":2}}],[\"image\",{\"1\":{\"16\":1}}],[\"instances\",{\"1\":{\"17\":5}}],[\"insert\",{\"1\":{\"11\":3}}],[\"in\",{\"1\":{\"17\":8}}],[\"innodb\",{\"0\":{\"24\":1},\"1\":{\"11\":1,\"16\":3,\"17\":33},\"2\":{\"19\":1}}],[\"increment\",{\"1\":{\"11\":2}}],[\"into\",{\"1\":{\"11\":2}}],[\"int\",{\"1\":{\"10\":1,\"11\":1}}],[\"integer\",{\"0\":{\"9\":1},\"2\":{\"14\":1}}],[\"i\",{\"1\":{\"2\":2,\"3\":1,\"15\":3,\"17\":1}}],[\"is\",{\"1\":{\"2\":1}}],[\"zhangsan\",{\"1\":{\"11\":1}}],[\"zhang\",{\"1\":{\"2\":1}}],[\"head\",{\"1\":{\"16\":3}}],[\"hard\",{\"1\":{\"2\":1}}],[\"have\",{\"1\":{\"2\":1}}],[\"hit\",{\"1\":{\"17\":2}}],[\"hi\",{\"0\":{\"2\":1}}],[\"home\",{\"0\":{\"0\":1}}],[\"关于我\",{\"0\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
